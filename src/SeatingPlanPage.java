import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.ArrayList;

public class SeatingPlanPage {
    private JPanel panel1;
    private JTable table1;
    private JLabel roomNameHeader;
    private JButton nextRoomButton;
    private JButton printButton;
    private JButton mainMenuButton;
    String department1, department2;
    private ArrayList<String> columnNames = new ArrayList<String>();
    ArrayList<String> Rooms = new ArrayList<String>();
    private int roomCount = 0;
    DefaultTableModel model;

    private String dept1LastRoll;
    private String dept2LastRoll;


    SeatingPlanPage(String department1, String department2, ArrayList<String> Rooms) {

        this.Rooms = Rooms;
        roomNameHeader.setText("Room Name: " + Rooms.get(roomCount));
        mainMenuButton.setVisible(false);


        JFrame frame = new JFrame("Seating Plan");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setLayout(null);
        frame.setResizable(false);
        panel1.setBounds(0, 0, 620, 400);
        frame.setSize(635, 460);
        frame.setBackground(new Color(19, 0, 90));
        frame.setForeground(new Color(19, 0, 90));
        frame.setVisible(true);
        frame.add(panel1);
        frame.setLocationRelativeTo(null);

        this.department1 = department1;
        this.department2 = department2;

        //calling the setRoomData method for the first frame
        setRoomData(Rooms.get(roomCount));

        printButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    MessageFormat header = new MessageFormat("Room Name: " + Rooms.get(roomCount-1));
                    MessageFormat footer = new MessageFormat("Generated by Exam Seating Manager");
                    if (!table1.print(JTable.PrintMode.FIT_WIDTH, header, footer)) {
                        System.err.println("User cancelled printing");
                    }
                } catch (java.awt.print.PrinterException exception) {
                    System.err.format("Cannot print %s%n", exception.getMessage());
                }
            }
        });

        nextRoomButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                roomNameHeader.setText("Room Name: " + Rooms.get(roomCount));
                setRoomData(Rooms.get(roomCount));

                if (roomCount == (Rooms.size())){
                    nextRoomButton.setVisible(false);
                    mainMenuButton.setVisible(true);
                }

            }
        });
        mainMenuButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new MainPage();
                frame.setVisible(false);
            }
        });

    }

        // Methods are here

        private void setRoomData(String passedRoomName){

            int rowsInRoom; //10 rows
            int columnsInRoom; //6 columns

            try{

                String url = "jdbc:mysql://localhost:3306/ExamSeatingManagement";
                String user = "root";
                String dbpass = "root";

                Connection con = DriverManager.getConnection(url,user,dbpass);
                Class.forName("com.mysql.cj.jdbc.Driver");

                //Insert data
                Statement st1 = con.createStatement();
                Statement st2 = con.createStatement();


                Statement st3 = con.createStatement();
                ResultSet rs1 = st1.executeQuery("select * from "+department1+";");
                ResultSet rs2 = st2.executeQuery("select * from "+department2+";");

                //getting rows and columns of the room
                ResultSet rs3 =  st3.executeQuery("select * from rooms where RoomName='"+passedRoomName+"';");
                rs3.next();
                columnsInRoom = Integer.parseInt(rs3.getString("Rows")); // here rows of the rooms is columns from front of the room
                rowsInRoom = Integer.parseInt(rs3.getString("totalSeats"))/columnsInRoom;

                String demoRoom[][] = new String[rowsInRoom][columnsInRoom];

                //Arraylist for dynamic column Names
                for (int i = 1; i <=columnsInRoom; i++) {
                    this.columnNames.add("Column 0"+i);
                }

//                Creating an array for the columnNames from ArrayList of columns
//                String [] columnNames = {"Column 1","Column 2", "Column 3","Column 4","Column 5","Column 6"};
                String [] columnNames = new String[this.columnNames.size()];
                for (int i = 0; i < columnNames.length; i++) {
                    columnNames[i] = "Column 0"+(i+1);
                }


                boolean isRollGettedDep1 = false;
                boolean isRollGettedDep2 = false;

                //for continuing with the last student left in dep1
                while ((dept1LastRoll==null) || rs1.next()){
                    if ((dept1LastRoll==null) || dept1LastRoll.equals(rs1.getString("Enrollment_ID"))){
                        isRollGettedDep1 = true;
                        break;
                    }
                }

                //for continuing with the last student left in dep2
                while ((dept2LastRoll==null) || rs2.next()){
                    if ((dept2LastRoll==null) || dept2LastRoll.equals(rs2.getString("Enrollment_ID"))){
                        isRollGettedDep2 = true;
                        break;
                    }
                }

                boolean isRoomFullFor1 = false;
                boolean isRoomFullFor2 = false;

            if (isRollGettedDep1 && isRollGettedDep2) {
                for (int i = 0; i < columnsInRoom; i++) { //5
                    for (int j = 0; j < rowsInRoom; j++) {  //10
                        if ((i + j) % 2 == 0) {
                            if (rs1.next()){
                                demoRoom[j][i] = rs1.getString("Enrollment_ID");
                            }
                            else{
                                demoRoom[j][i] = "";
                                isRoomFullFor1 = true;
                            }

                        }
                        else {
                            if (rs2.next()){
                                demoRoom[j][i] = rs2.getString("Enrollment_ID");
                            }
                            else{
                                demoRoom[j][i] = "";
                                isRoomFullFor2 = true;
                            }
                        }


                    }
                }
            }
                if (!isRoomFullFor1){
                    dept1LastRoll = rs1.getString("Enrollment_ID");
                }
                if(!isRoomFullFor2){
                    dept2LastRoll = rs2.getString("Enrollment_ID");
                }

                st1.close();
                st2.close();
                st3.close();
                rs1.close();
                rs2.close();
                rs3.close();




                model = new DefaultTableModel(demoRoom,columnNames);
                table1.setModel(model);

                //Increasing the room count for the next room creation on click of next button
                roomCount++;
                this.columnNames.clear();
            }
            catch (Exception exception){
                System.out.println("Error ocured: "+exception);
                JOptionPane.showMessageDialog(null,"Something went wrong!");
            }
        }



    }
